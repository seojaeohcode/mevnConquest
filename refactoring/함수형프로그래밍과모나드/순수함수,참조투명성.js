/* 
함수형 프로그래밍
=> 작은 순수함수들을 블록 쌓듯이 로직을 구현하고 최소의 부수효과 그리고 고차함수를 활용해 재사용성을 높인 프로그래밍 패러다임.
=> 비즈니스 로직에서 null, undefined 등을 확인해서 타입 안정성을 확보가능.(Java = 스트림API 도입 / React.js에서도 클래스 컴포넌트가 아닌 함수형 컴포넌트 도입.)

순수함수 = 동일한 입력을 받아서 동일한 출력을 하는 것을 의미.
=> 참조 투명성의 성질을 지님.
*/

/* 
함수형 프로그래밍의 주의점
1.최대한 지역변수만을 사용해 구현
2.인수로 넘기는 값의 본체까지 수정하지 않기
3.매개변수로 넘기는 값이 객체라면 원본 객체에 변이를 일으키지 않기.
=>deep copy를 하고 변이를 하는 등의 방법을 생각해야함.
*/

/* 
pure은 외부의 값에 의존적이지 않기 때문에 순수함수이고,
not_pure은 외부 값인 b에 의존적 => 순수함수가 아님.
순수함수의 예시 Math.max 매개변수 값만으로 결과를 도출
순수함수로 구성된 로직은 메모리를 공유해도 아무 문제가 없음.
*/

//순수함수와 비순수함수
const b = 1
const pure = (a, b)=>{
    return a+b
}
const not_pure = (a)=>{
    return a+b
}

console.log(pure(1,3))
console.log(not_pure(1))

//전역변수를 참조할 때의 순수함수
let c = 0
//나쁜 케이스 (c를 매개변수로 받지도 않고 변환은 하고 반환까지 한다.)
const bad_f = () =>{
    return c++
}
console.log(c) // 1
//좋은 예: 매개변수로 받아 +1을 한다.
const f = c =>c+1